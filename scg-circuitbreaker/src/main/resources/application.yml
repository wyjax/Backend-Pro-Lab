server:
  port: 8002
spring:
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 5000
      connect-timeout: 10000
      password: tnseornrqkq1@
  cloud:
    gateway:
      httpclient:
        connect-timeout: 5000
      routes:
        - id: test
          uri: http://localhost:8444
          predicates:
            - Path=/api/test/**
          filters:
            - name: CircuitBreaker
              args:
                name: gwCircuit
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@ipKeyResolver}"
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 30
                redis-rate-limiter.requestedTokens: 1
resilience4j:
#  timelimiter:
#    configs:
#      default:
#        cancelRunningFuture: true
#        timeoutDuration: 10s
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        sliding-window-type: count_based
        sliding-window-size: 5 # 배열 사이즈가 10이여서 최소 10번의 요청은 들어와야함
        failure-rate-threshold: 10
        slow-call-rate-threshold: 60 # slow api 비율
        slow-call-duration-threshold: 5s # slow circuit-breaker는 나눠서 적용하면 될 듯 싶다. 필요한 곳에만 적용하는 방법으로
        minimum-number-of-calls: 10 # 최소 요청수
        # permitted-number-of-calls-in-half-open-state: 10
        # permitted-number-of-calls-in-half-open-state: 500
        wait-duration-in-open-state: 15s # circuit이 open되고나서 몇 초 후에 closed 되는가
        ignore-exceptions:
          - com.wyjax.scgcircuitbreaker.exception.AuthenticationException
          - java.io.IOException
          - org.springframework.web.client.HttpServerErrorException
          - java.lang.IllegalStateException
          - java.lang.IllegalArgumentException
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
  ratelimiter:
    metrics:
      enabled: true
    configs:
      default:
        register-health-indicator: true
        limit-for-period: 3 # default 50
        limit-refresh-period: 60s # 500 nano
        timeout-duration: 1s # default 5s
  bulkhead:
    configs:
      default:
        max-concurrent-calls: 100
  thread-pool-bulkhead:
    configs:
      default:
        max-thread-pool-size: 4
        core-thread-pool-size: 2
        queue-capacity: 2
management:
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  endpoint:
    health:
      showDetails: always
    web:
      exposure:
        include: "*"
      expose: "*"
    metrics:
      enabled: true
  metrics:
    enable:
      resilience4j:
        circuitbreaker:
          calls: true
logging:
  level:
    root: info